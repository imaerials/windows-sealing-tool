<File version="3.1">
  <FileID>7ace5f42-5353-4d3e-990b-48517c01e7b9</FileID>
  <LastExport>132564072642485639</LastExport>
  <Preview>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
kiX0xgAAAABJRU5ErkJggg==</Preview>
  <Form>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
+3VkeqQh41n51gvuxNi/asW/AU0BZms8ZgAA</Form>
  <Code><![CDATA[
$formBISealingTool_Load = {
	#TODO: Initialize Form Controls here
	$global:hostname = $env:COMPUTERNAME
	$global:username = "$env:USERDOMAIN\$env:USERNAME"
	$buttonSealImage.Enabled = $false
	#$buttonUnsealImage.Enabled =$false
	$label1.Text = $username
	$label2.Text = $hostname
	$global:configFileLoaded = $false
	$statusbar1.Text = $username
	
	
}
#region Control Helper Functions
function Update-ListViewColumnSort
{
<#
	.SYNOPSIS
		Sort the ListView's item using the specified column.
	
	.DESCRIPTION
		Sort the ListView's item using the specified column.
		This function uses Add-Type to define a class that sort the items.
		The ListView's Tag property is used to keep track of the sorting.
	
	.PARAMETER ListView
		The ListView control to sort.
	
	.PARAMETER ColumnIndex
		The index of the column to use for sorting.
	
	.PARAMETER SortOrder
		The direction to sort the items. If not specified or set to None, it will toggle.
	
	.EXAMPLE
		Update-ListViewColumnSort -ListView $listview1 -ColumnIndex 0
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListView]$ListView,
		[Parameter(Mandatory = $true)]
		[int]$ColumnIndex,
		[System.Windows.Forms.SortOrder]$SortOrder = 'None'
	)
	
	if (($ListView.Items.Count -eq 0) -or ($ColumnIndex -lt 0) -or ($ColumnIndex -ge $ListView.Columns.Count))
	{
		return;
	}
	
	#region Define ListViewItemComparer
	try
	{
		[ListViewItemComparer] | Out-Null
	}
	catch
	{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition @" 
	using System;
	using System.Windows.Forms;
	using System.Collections;
	public class ListViewItemComparer : IComparer
	{
	    public int column;
	    public SortOrder sortOrder;
	    public ListViewItemComparer()
	    {
	        column = 0;
			sortOrder = SortOrder.Ascending;
	    }
	    public ListViewItemComparer(int column, SortOrder sort)
	    {
	        this.column = column;
			sortOrder = sort;
	    }
	    public int Compare(object x, object y)
	    {
			if(column >= ((ListViewItem)x).SubItems.Count)
				return  sortOrder == SortOrder.Ascending ? -1 : 1;
		
			if(column >= ((ListViewItem)y).SubItems.Count)
				return sortOrder == SortOrder.Ascending ? 1 : -1;
		
			if(sortOrder == SortOrder.Ascending)
	        	return String.Compare(((ListViewItem)x).SubItems[column].Text, ((ListViewItem)y).SubItems[column].Text);
			else
				return String.Compare(((ListViewItem)y).SubItems[column].Text, ((ListViewItem)x).SubItems[column].Text);
	    }
	}
"@ | Out-Null
	}
	#endregion
	
	if ($ListView.Tag -is [ListViewItemComparer])
	{
		#Toggle the Sort Order
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			if ($ListView.Tag.column -eq $ColumnIndex -and $ListView.Tag.sortOrder -eq 'Ascending')
			{
				$ListView.Tag.sortOrder = 'Descending'
			}
			else
			{
				$ListView.Tag.sortOrder = 'Ascending'
			}
		}
		else
		{
			$ListView.Tag.sortOrder = $SortOrder
		}
		
		$ListView.Tag.column = $ColumnIndex
		$ListView.Sort() #Sort the items
	}
	else
	{
		if ($SortOrder -eq [System.Windows.Forms.SortOrder]::None)
		{
			$SortOrder = [System.Windows.Forms.SortOrder]::Ascending
		}
		
		#Set to Tag because for some reason in PowerShell ListViewItemSorter prop returns null
		$ListView.Tag = New-Object ListViewItemComparer ($ColumnIndex, $SortOrder)
		$ListView.ListViewItemSorter = $ListView.Tag #Automatically sorts
	}
}


function Add-ListViewItem
{
<#
	.SYNOPSIS
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.DESCRIPTION
		Adds the item(s) to the ListView and stores the object in the ListViewItem's Tag property.

	.PARAMETER ListView
		The ListView control to add the items to.

	.PARAMETER Items
		The object or objects you wish to load into the ListView's Items collection.
		
	.PARAMETER  ImageIndex
		The index of a predefined image in the ListView's ImageList.
	
	.PARAMETER  SubItems
		List of strings to add as Subitems.
	
	.PARAMETER Group
		The group to place the item(s) in.
	
	.PARAMETER Clear
		This switch clears the ListView's Items before adding the new item(s).
	
	.EXAMPLE
		Add-ListViewItem -ListView $listview1 -Items "Test" -Group $listview1.Groups[0] -ImageIndex 0 -SubItems "Installed"
#>
	
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		[System.Windows.Forms.ListView]$ListView,
		[ValidateNotNull()]
		[Parameter(Mandatory = $true)]
		$Items,
		[int]$ImageIndex = -1,
		[string[]]$SubItems,
		$Group,
		[switch]$Clear)
	
	if ($Clear)
	{
		$ListView.Items.Clear();
	}
	
	$lvGroup = $null
	if ($Group -is [System.Windows.Forms.ListViewGroup])
	{
		$lvGroup = $Group
	}
	elseif ($Group -is [string])
	{
		#$lvGroup = $ListView.Group[$Group] # Case sensitive
		foreach ($groupItem in $ListView.Groups)
		{
			if ($groupItem.Name -eq $Group)
			{
				$lvGroup = $groupItem
				break
			}
		}
		
		if ($null -eq $lvGroup)
		{
			$lvGroup = $ListView.Groups.Add($Group, $Group)
		}
	}
	
	if ($Items -is [Array])
	{
		$ListView.BeginUpdate()
		foreach ($item in $Items)
		{
			$listitem = $ListView.Items.Add($item.ToString(), $ImageIndex)
			#Store the object in the Tag
			$listitem.Tag = $item
			
			if ($null -ne $SubItems)
			{
				$listitem.SubItems.AddRange($SubItems)
			}
			
			if ($null -ne $lvGroup)
			{
				$listitem.Group = $lvGroup
			}
		}
		$ListView.EndUpdate()
	}
	else
	{
		#Add a new item to the ListView
		$listitem = $ListView.Items.Add($Items.ToString(), $ImageIndex)
		#Store the object in the Tag
		$listitem.Tag = $Items
		
		if ($null -ne $SubItems)
		{
			$listitem.SubItems.AddRange($SubItems)
		}
		
		if ($null -ne $lvGroup)
		{
			$listitem.Group = $lvGroup
		}
	}
}

#endregion

$listview1_SelectedIndexChanged = {
	#TODO: Place custom script here
	
}


#Seal OPtions operations
$buttonSealImage_Click = {
	$progressbar1.Maximum = $operationsQtty
	$progressbar1.Step = 1
	$progressbar1.Value = 0
	#TODO: Place custom script here
	Write-Host ($textbox1.Text)
	foreach ($setting in $sealOptions)
	{
		
		
		switch ($setting.psobject.Properties.Name)
		{
			regKeysToDelete {
				$operationsQtty += ($setting.regKeysToDelete.Count)
				foreach ($key in $setting.regKeysToDelete)
				{
					switch ($key.value)
					{
						"novalue" {
							Write-Host "deleting item $($key.key) "
						}
						'' { write-host "no registry deletions here" }
						default {
							Write-Host "deleting item property $($key.value)"
						}
					}
				}
			}
			regKeysToAdd {
				$operationsQtty += ($setting.regKeysToAdd.Count)
				
				Write-host "Adding Reg KEys"
			}
			servicesToCheck {
				$operationsQtty += ($setting.servicesToCheck.Count)
				foreach ($service in $setting.servicesToCheck)
				{
					switch ($service.status)
					{
						'disabled' {
							Write-host "SERVICE disabling"
							#Set-Service ($service.name) -StartupType Disabled
							
						}
						'stop' {
							Write-host "SERVICE Stopping"
							
							#Stop-Service -Name ($service.name) -Force
						}
						'start' {
							Write-host "SERVICE start"
							
							#Start-Service -Name ($service.name)
						}
						'automatic' {
							Write-host "SERVICE at"
							
							#Set-Service ($service.name) -StartupType Automatic
						}
						'' {
							write-host "no service to check here"
							
							#Set-Service ($service.name) -StartupType Automatic
						}
					}
				}
			}
			filesToDelete {
				$operationsQtty += ($setting.filesToDelete.Count)
				
				foreach ($file in $setting.filesToDelete)
				{
					switch ($file.path)
					{
						'' { write-host "no files to delete here" }
						Default { Write-Host "removing file $($file.path)" }
					}
					
				}
				# Remove-Item -Path C:\Test\hidden-RO-file.txt -Force
			}
			Default { }
			
		}
	}
	
	
	
}

$textbox1_TextChanged = {
	#TODO: Place custom script here
	$buttonSealImage.Enabled = $true
}

$labelSealOptions_Click = {
	#TODO: Place custom script here
	
}

$labelUnsealOptions_Click = {
	#TODO: Place custom script here
	
}

$loadConfigurationToolStripMenuItem_Click = {
	if ($openfiledialog1.ShowDialog() -eq 'OK')
	{
		$global:cfgfilePath = $openfiledialog1.FileName
		$openfiledialog1.Filter = "(*.json)|*.json"
		$global:jsonFile = Get-Content -Path $cfgfilePath | ConvertFrom-Json
		
		if ($jsonFile)
		{
			$configFileLoaded = $true
			$statusbar1.Text = "Config File loaded $jsonFile"
			
			
			
		}
		$global:regKeysToDelete = $jsonFile.sealOptions.regKeysToDelete
		#New Approach
		$global:sealOptions = $jsonFile.sealOptions
		#
		$global:sealServices = $jsonFile.sealOptions.servicesToCheck
		$filesToDelete = $jsonFile.sealOptions.filesToDelete
		$global:unsealServices = $jsonFile.unsealOptions.servicesToCheck
		### Seal Options view
		##This needs improvement, should not repeat.
		foreach ($file in $filesToDelete)
		{
			Add-ListViewItem -ListView $listview1 -Items ($file.path) -SubItems "Delete" -Group $listview1.Groups["files"]
		}
		foreach ($regkey in $regKeysToDelete)
		{
			Add-ListViewItem -ListView $listview1 -Items "$($regkey.key) - $($regkey.value)" -SubItems "Delete" -Group $listview1.Groups["regkey"]
		}
		foreach ($service in $sealServices)
		{
			switch ($service.status)
			{
				'disabled'{
					Add-ListViewItem -ListView $listview1 -Items ($service.name) -SubItems "Disable Startup" -Group $listview1.Groups["services"]
				}
				'stop'{
					Add-ListViewItem -ListView $listview1 -Items ($service.name) -SubItems "Stop" -Group $listview1.Groups["services"]
				}
				'start'{
					Add-ListViewItem -ListView $listview1 -Items ($service.name) -SubItems "Start" -Group $listview1.Groups["services"]
				}
			}
		}
		### Unseal Options ###
		foreach ($service in $unsealServices)
		{
			switch ($service.status)
			{
				'disabled'{
					Add-ListViewItem -ListView $listview2 -Items ($service.name) -SubItems "Disable Startup" -Group $listview2.Groups["services"]
				}
				'stop'{
					Add-ListViewItem -ListView $listview2 -Items ($service.name) -SubItems "Stop" -Group $listview2.Groups["services"]
				}
				'start'{
					Add-ListViewItem -ListView $listview2 -Items ($service.name) -SubItems "Start" -Group $listview2.Groups["services"]
				}
				'automatic' {
					Add-ListViewItem -ListView $listview2 -Items ($service.name) -SubItems "Automatic Startup" -Group $listview2.Groups["services"]
				}
			}
		}
	}
	#TODO: Place custom script here
	
}

$openfiledialog1_FileOk = [System.ComponentModel.CancelEventHandler]{
	#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
	#TODO: Place custom script here
	
}

$buttonUnsealImage_Click = {
	
	#TODO: Place custom script here
	Write-Host $jsonFile.sealOptions.regKeysToDelete
	Write-Host "Working with services"
	if ($unsealServices)
	{
		$progressbar1.Maximum = $unsealServices.Count
		$progressbar1.Step = 1
		$progressbar1.Value = 0
		foreach ($service in $unsealServices)
		{
			$progressbar1.PerformStep()
			switch ($service.status)
			{
				'disabled'{
					#Set-Service ($service.name) -StartupType Disabled
					
				}
				'stop'{
					#Stop-Service -Name ($service.name) -Force
				}
				'start'{
					#Start-Service -Name ($service.name)
				}
				'automatic' {
					#Set-Service ($service.name) -StartupType Automatic
				}
			}
		}
		
	}
	
}

$exitToolStripMenuItem_Click = {
	#TODO: Place custom script here
	$formBISealingTool.Close()
}

$statusbar1_PanelClick = [System.Windows.Forms.StatusBarPanelClickEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.StatusBarPanelClickEventArgs]
	#TODO: Place custom script here
	
}

$labelUserName_Click = {
	#TODO: Place custom script here
	
}

$labelHostname_Click = {
	#TODO: Place custom script here
	
}



]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>